::: lead

**Contentsgarten** is a headless, modern, cloud-native wiki engine.

:::

For team wikis, and collaborative digital gardens — check out the [UseCases](/wiki/UseCases) page for more information.

::: warning Project Status

Currently has a bare bones, incomplete and janky implementation... The wiki engine has been extracted out of [Creatorsgarten website](https://github.com/creatorsgarten/creatorsgarten.org) and [Directcommit](https://github.com/dtinth/directcommit) codebases and has been significantly improved. However it is not used in production anywhere yet. Once this becomes mature enough, the plan is to migrate the [Creatorsgarten website](https://creatorsgarten.org) to use it. Still not sure if that will ever happen, though.

:::

## Goals

{% assign done = "✅" %}

- {{done}} Contents stored on GitHub repo, accessed and manipulated using Octokit (using a GitHub App or (TBA) Personal Access Token).
- {{done}} Write [Markdown](/wiki/Markdown). Rendered using `markdown-it` with [Tailwind Typography](https://tailwindcss.com/docs/typography-plugin).
- {{done}} Pages can include templates and other rudimentary logic using [Liquid](/wiki/Liquid) tags.
- {{done}} Users authenticate via GitHub, through Firebase.
- {{done}} Public [API](/wiki/API) available.
- Allowed users can make changes to the wiki page through the web interface if the [access control rules](/wiki/ACL) allows for it, even if the user does not have write access to the repo. (This effectively skips the pull request and invitation workflows.)
- {{done}} Should be free-to-host for small wikis.
  - Serverless route: The wiki can be hosted on Netlify or Vercel (free plan available) with a Redis cache (free plans available on Redis Labs, Render, or Upstash).
  - Stateful route: The wiki can be hosted on a server that runs containers like Fly.io (free plan available) with an in-memory cache given that no horizontal scaling is done.
- {{done}} Can be used as a library.
  - Publish to npm
- Automatic hierarchy. Do you always have a messy Notion sidebar despite your effort in trying to organize it? Contentsgarten aims to automatically organize pages based on how pages are linked together.

## Architecture

- The core wiki engine is a [tRPC](https://trpc.io/) router, which allows integrating into any Node.js app.
  - The Contentsgarten Wiki you are seeing here is a [Remix](https://remix.run/) app.
- Authentication is handled through Firebase Authentication.
- Redis-based caching powered by [keyv](https://www.npmjs.com/package/keyv) for faster page loads.
  - GitHub API for loading content has a high latency. Adding a Redis cache reduced the page load time from 4 seconds to less than 0.3 seconds. With a Redis server in a closer region, this can go down further.
  - The cache may be _untrusted_; that is, it may be shared with other projects, so cached data may be signed to avoid tampering with the cache.
  - Alternatively, if your wiki is run on a single instance (no horizontal scaling), in-memory caching can be used instead.
- Encourages the stale-while-revalidate fetching style. On server rendering, possible-stale data will be fetched from the cache. Once the page is loaded, client-side JavaScript can fetch the “authoritative” version of the page and update the cache with the latest version.




