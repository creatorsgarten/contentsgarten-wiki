::: lead

**Contentsgarten** is a modern, cloud-native wiki engine.

:::

Check out the [UseCases](/wiki/UseCases) for why it is created.

::: warning Project Status

Currently has a bare bones, incomplete and janky implementation... The wiki engine has been extracted out of [Creatorsgarten website](https://github.com/creatorsgarten/creatorsgarten.org) and [Directcommit](https://github.com/dtinth/directcommit) codebases and has been significantly improved. However it is not used in production anywhere yet. Once this becomes mature enough, the plan is to migrate the website to use it. Still not sure if that will ever happen, though.

:::

## Goals

{% assign done = "âœ…" %}

- {{done}} Contents stored on GitHub repo, accessed and manipulated using Octokit (using GitHub App or Personal Access Token).
- {{done}} Write [Markdown](/wiki/Markdown). Rendered using `markdown-it` with [Tailwind Typography](https://tailwindcss.com/docs/typography-plugin).
- {{done}} Pages can include templates using Liquid tags.
- {{done}} Users authenticate via GitHub, through Firebase.
- Allowed users can make changes to the wiki page through the web interface if the access control rules allows for it, even if the user does not have write access to the repo. (This effectively skips the pull request and invitation workflows.)
- [Headless (API-only) mode](/wiki/HeadlessMode) available.

## Architecture

- Contentsgarten is a [Remix](https://remix.run/) app, but its core wiki engine is written in a framework-agnostic way.
- The [WikiActor](https://github.com/creatorsgarten/contentsgarten/blob/main/app/wiki-engine/actor.ts) class acts as a [facade](https://refactoring.guru/design-patterns/facade) to the core wiki engine, which handles authentication and authorization concerns among others. All API routes delegate most of the work to this class.
- Every web route has a corresponding API route. This allows a completely custom frontend to be developed ([headless mode](/wiki/HeadlessMode)).