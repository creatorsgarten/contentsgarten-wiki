::: lead

**Contentsgarten** is a headless, modern, cloud-native wiki engine.

:::

For team wikis, and collaborative digital gardens — check out the [UseCases](/wiki/UseCases) page for more information.

::: warning Project Status

Currently has a bare bones, incomplete and janky implementation... The wiki engine has been extracted out of [Creatorsgarten website](https://github.com/creatorsgarten/creatorsgarten.org) and [Directcommit](https://github.com/dtinth/directcommit) codebases and has been significantly improved. However it is not used in production anywhere yet. Once this becomes mature enough, the plan is to migrate the [Creatorsgarten website](https://creatorsgarten.org) to use it. Still not sure if that will ever happen, though.

:::

## Goals

{% assign done = "✅" %}

- {{done}} Contents stored on GitHub repo, accessed and manipulated using Octokit (using a GitHub App or (TBA) Personal Access Token).
- {{done}} Write [Markdown](/wiki/Markdown). Rendered using `markdown-it` with [Tailwind Typography](https://tailwindcss.com/docs/typography-plugin).
- {{done}} Pages can include templates and other rudimentary logic using [Liquid](/wiki/Liquid) tags.
- {{done}} Users authenticate via GitHub, through Firebase.
- {{done}} Public [API](/wiki/API) available.
- Allowed users can make changes to the wiki page through the web interface if the access control rules allows for it, even if the user does not have write access to the repo. (This effectively skips the pull request and invitation workflows.)
- {{done}} Can be used as a library.
  - Publish to npm

## Architecture

- The Contentsgarten Wiki is a [Remix](https://remix.run/) app, but its core wiki engine is a [tRPC](https://trpc.io/) router, which allows integrating into any Node.js app.
- Authentication is handled through Firebase Authentication.
- Redis-based caching powered by [keyv](https://www.npmjs.com/package/keyv) for faster page loads.
  - GitHub API for loading content has a high latency. Adding a Redis cache reduced the page load time from 4 seconds to less than 0.3 seconds. With a Redis server in a closer region, this can go down further.
  - The cache may be _untrusted_; that is, it may be shared with other projects, so cached data may be signed to avoid tampering with the cache.
- Encourages the stale-while-revalidate fetching style. On server rendering, possible-stale data will be fetched from the cache. Once the page is loaded, client-side JavaScript can fetch the “authoritative” version of the page and update the cache with the latest version.




