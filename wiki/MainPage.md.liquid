::: lead

**Contentsgarten** is an open-source headless, modern, cloud-native wiki engine.

:::

For team wikis, and collaborative digital gardens ‚Äî check out the [UseCases](/wiki/UseCases) page for more information.

To see all pages, check out [Special/AllPages](/wiki/Special/AllPages).

## Instances

This wiki engine is currently being used on:

- [**Creatorsgarten wiki**](https://wiki.creatorsgarten.org)
- [Contentsgarten wiki](https://contentsgarten.netlify.app/wiki/MainPage) (you are here!)

## Goals

{% assign tba = "üöß" %}

- Contents are stored [on a GitHub repo](https://github.com/creatorsgarten/contentsgarten-wiki).
- Uses a separate ACL. Allowed users can make changes to the wiki page through the web interface if the [access control rules](/wiki/ACL) allows for it, even if the user does not have write access to the repo. (This effectively skips the pull request and invitation workflows.)
- Markup format agnostic. The frontend decides how to parse and render the page contents. The default frontend uses [Markdown](/wiki/Markdown), rendered using `micromark` with [Tailwind Typography](https://tailwindcss.com/docs/typography-plugin).
- Pages can include templates and other rudimentary logic using [Liquid](/wiki/Liquid) tags.
- Users authenticate using GitHub via Firebase Auth.
- Public [API](/wiki/API) available that can be called on the client side.
- Should be free-to-host for small wikis.
  - Serverless route: The wiki can be hosted on Netlify or Vercel (free plan available) with a Redis cache (free plans available on Redis Labs, Render, or Upstash).
     - This wiki you‚Äôre reading is hosted on [Netlify](https://netlify.app/) with a Redis cache hosted on [Render](https://render.com/).
  - Stateful route: The wiki can be hosted on a server that runs containers like (free usage quota is available on Fly.io, Railway, Google Cloud Run, and Deploys.app) with an in-memory cache, given that no horizontal scaling is done.
     - The [Contentsgarten wiki](https://contentsgarten.netlify.app/wiki/MainPage) is hosted on [Deploys.app](https://www.deploys.app/).
- Can be used as a library.
  - {{tba}} Publish to npm
- {{tba}} Automatic hierarchy. Do you always have a messy Notion sidebar despite your effort in trying to organize it? Contentsgarten aims to automatically organize pages based on how pages are linked together.

{{tba}} = future goals (unimplemented)

## Architecture

- The core wiki engine is a [tRPC](https://trpc.io/) router, which allows integrating into any Node.js app.
  - The Contentsgarten Wiki you are seeing here is a [Remix](https://remix.run/) app.
- Authentication is handled through Firebase Authentication.
- Redis-based caching powered by [keyv](https://www.npmjs.com/package/keyv) for faster page loads.
  - GitHub API for loading content has a high latency. Adding a Redis cache reduced the page load time from 4 seconds to less than 0.3 seconds. With a Redis server in a closer region, this can go down further.
  - The cache may be _untrusted_; that is, it may be shared with other projects, so cached data may be signed to avoid tampering with the cache.
  - Alternatively, if your wiki is run on a single instance (no horizontal scaling), in-memory caching can be used instead.
- Encourages the stale-while-revalidate fetching style. On server rendering, possible-stale data will be fetched from the cache. Once the page is loaded, client-side JavaScript can fetch the ‚Äúauthoritative‚Äù version of the page and update the cache with the latest version.




