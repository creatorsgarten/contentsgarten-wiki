Contentsgarten may be a good fit if:

- You want to create a collaborative digital garden in a form of a wiki.
- You _donâ€™t_ want to rebuild your site every time something changes.
- You want a custom wiki system that runs on serverless compute, without having to manage any server.
- You want to write your wiki contents as flat plain-text files, in Markdown language, rather than in some custom wikitext syntax.
- You want to retain complete control over your data in your GitHub repository.
- You want to let other trusted people (who have a GitHub account) contribute content to your wiki through a simple web interface, without requiring them to go through the pull request or invitation workflows.
- You want your wiki to have advanced features that tools like Notion, Confluence, or GitHub Wiki does not provide.
- You want people to be able to edit the wiki contents from Git directly if they choose to.
- You want your wiki site to be updated instantly when someone edits it, without having to wait for rebuilding the site.

Contentsgarten may **not** be a good fit if:

- You want a real-time WYSIWYG editing experience. In that case, use something like Notion. (Although as a headless engine, you can theoretically add a collaboration layer on top.)
- You want a stable, battle-tested tool that scales. In that case, try MediaWiki, PmWiki, or DokuWiki.
- You want to allow people to log in using something other than a GitHub account. To keep things simple, Contentsgarten is tightly integrated with GitHub, only supports GitHub sign-in, and has no plan to support anything else.
- You want every page to load in the blink of an eye. Contentsgarten is optimized for the use case where page contents are dynamic and change frequently. To ensure that we always get fresh content, data is loaded from GitHub on-demand. Therefore, load time will be slower than a statically-built sites (but on the flipside, there is no waiting for the site to build when updating a page).

Use cases that may be suitable for Contentsgarten:

- Team wiki
- Community wiki
- Collaborative digital garden
- Living documents

Use cases that is probably not suitable for Contentsgarten:

- Documentation site
- Blog
- Team workspace
